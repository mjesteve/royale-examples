<?xml version="1.0" encoding="utf-8"?>
<j:SectionContent xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:j="library://ns.apache.org/royale/jewel"
    xmlns:html="library://ns.apache.org/royale/html"
    style="padding:20px;"
    xmlns:js="library://ns.apache.org/royale/basic">

     <fx:Script>
        <![CDATA[

            import com.mjesteve.royale.templates.models.AppModel;
            import com.mjesteve.royale.templates.events.LoginSignInEvent;
            import org.apache.royale.events.Event;
            import org.apache.royale.events.ValueChangeEvent;

            import org.apache.royale.core.IBeadLayout;
			import org.apache.royale.core.IBeadView;
			import org.apache.royale.events.CloseEvent;
			import org.apache.royale.events.Event;
			import org.apache.royale.events.MouseEvent;
			import org.apache.royale.jewel.Alert;
			import org.apache.royale.jewel.CheckBox;
			import org.apache.royale.jewel.beads.layouts.HorizontalLayout;
			import org.apache.royale.jewel.beads.layouts.VerticalLayout;
			import org.apache.royale.jewel.beads.views.AlertView;
			import org.apache.royale.html.elements.Input;
			import org.apache.royale.jewel.ComboBox;
			import org.apache.royale.jewel.HGroup;
			import org.apache.royale.debugging.check;
			import org.apache.royale.jewel.Label;
			import org.apache.royale.jewel.DropDownList;
			import com.mjesteve.royale.templates.vos.DataItemVO;
			import com.mjesteve.royale.templates.events.DataEvent;
			import com.mjesteve.royale.templates.itemRenderers.ListDataItemRenderer;
			import org.apache.royale.collections.ArrayList;

            [Bindable]
            [Inject(source="appModel", required="true")]
            public var appModel:AppModel;    

            private const READ_MODE:String = "readMode"
            private const ADD_MODE:String = "addMode"
            private const EDIT_MODE:String = "readMode"
            private const DEL_MODE:String = "deleteMode"

            private var currentState:String = READ_MODE

            // Event handler function uses a static method to show
            // a pop-up window with the title, message, and requested buttons.        
            
            public var alert:Alert;
            // changing controlBar's Buttons Layout
            private function clickHandler(event:MouseEvent):void {
                currentState = ADD_MODE
                alert = Alert.show("Create a <b>new</b> company.", "Save Changes", 3);
				alert.height = 500;
                expandButtons();
				alert.addEventListener(CloseEvent.CLOSE, alertClickHandler);
            }
        
            private function clickHandler2(event:MouseEvent):void {
                currentState = EDIT_MODE
                alert = Alert.show("Do you want to <b>save</b> your changes?", "Save Changes", 3);
				alert.height = 500;
                expandButtons(lData.selectedItem as DataItemVO);
				alert.addEventListener(CloseEvent.CLOSE, alertClickHandler);
            }

            private function clickHandler3(event:MouseEvent):void {
                currentState = DEL_MODE
                alert = Alert.show("Do you want to <b>delete</b> this row?", "Drop company", 3);
				alert.addEventListener(CloseEvent.CLOSE, alertClickHandler);
            }
            
            public var input1:Input
            public var input2:Input
            public var checkBox:CheckBox
            public var combo:DropDownList

            private function expandButtons(data:DataItemVO = null):void {
                var alertView:AlertView = alert.getBeadByType(IBeadView) as AlertView;
                var verticalLayout:VerticalLayout = new VerticalLayout();

                verticalLayout.gap = 9;
                alertView.content.addBead(verticalLayout);
                input1 = new Input();
                input1.percentWidth = 100
                input1.style="margin-left: 7px"
                if (data) input1.value = data.id
                
                var label:Label = new Label();
                label.text = "Code"

                var hgroup:HGroup = new HGroup(); hgroup.percentWidth = 100
                hgroup.itemsVerticalAlign = 'itemsCenter'
                hgroup.strandChildren.addElement(label)
                hgroup.strandChildren.addElement(input1)
                alertView.content.addElement(hgroup);

                input2 = new Input();
                input2.percentWidth = 100
                input2.style="margin-left: 7px"
                if (data) input2.value = data.name

                label = new Label();
                label.text = "Name"
                hgroup = new HGroup(); hgroup.percentWidth = 100
                hgroup.itemsVerticalAlign = 'itemsCenter'
                hgroup.strandChildren.addElement(label)
                hgroup.strandChildren.addElement(input2)
                alertView.content.addElement(hgroup);

                checkBox = new CheckBox();                
                if (data) checkBox.selected = data.active
                checkBox.text = "Active"
                combo = new DropDownList()
                combo.percentWidth = 100
                combo.dataProvider= new ArrayList([{id:0,description:'Multiple'},{id:1,description:'Single'}]);
                combo.labelField="description"   
                combo.style="margin-left: 7px"                 
                if (data) combo.selectedIndex = data.multiSingle else combo.selectedIndex = 0

                hgroup = new HGroup(); hgroup.percentWidth = 100
                hgroup.itemsVerticalAlign = 'itemsCenter'
                hgroup.strandChildren.addElement(checkBox)
                hgroup.strandChildren.addElement(combo)

                alertView.content.addElement(hgroup);
            }


            // Event handler function for displaying the selected Alert button.
            private function alertClickHandler(event:CloseEvent):void {
                trace(event.detail)
                if (event.detail == Alert.YES){
                    var iVO:DataItemVO
                    if(currentState == ADD_MODE){
                        iVO = new DataItemVO(input1.value,input2.value,checkBox.selected ? 1 : 0, combo.selectedIndex)
                        dispatchEvent(new DataEvent(DataEvent.ADD_COMPANY, iVO as DataItemVO))                        
                    }else if(currentState == EDIT_MODE){
                        iVO = new DataItemVO(input1.value,input2.value,checkBox.selected ? 1 : 0, combo.selectedIndex)
                        dispatchEvent(new DataEvent(DataEvent.EDIT_COMPANY, iVO as DataItemVO,lData.selectedItem.id))
                    }else if(currentState == DEL_MODE){
                        dispatchEvent(new DataEvent(DataEvent.DELETE_COMPANY, lData.selectedItem as DataItemVO))
                    }
                }
                currentState = READ_MODE
            }


        ]]>
     </fx:Script>

    <j:beads>
		<js:SimpleStatesImpl/>
        <j:VerticalCenteredLayout/>
		<js:ContainerDataBinding/>
	</j:beads>

        <j:Card localId="cardLogin" id="cardLogin" width="100%" height="100%">
            <j:CardPrimaryContent>
                <j:Grid gap="true" width="100%">
            <j:GridCell desktopNumerator="1" desktopDenominator="6" tabletNumerator="1" tabletDenominator="6" phoneNumerator="1" phoneDenominator="6">
                <j:VGroup height="100%" itemsVerticalAlign="itemsCenter" itemsHorizontalAlign="itemsCenter">
                    <j:Label html="ID" >
                        <j:beads>
                            <j:SizeControl size="large"/>
                            <j:TextAlign align="left"/>
                        </j:beads>
                    </j:Label>
                </j:VGroup>
            </j:GridCell>
            <j:GridCell desktopNumerator="1" desktopDenominator="3" tabletNumerator="1" tabletDenominator="3" phoneNumerator="1" phoneDenominator="3" itemsVerticalAlign="itemsCenter">
                <j:VGroup height="100%" itemsVerticalAlign="itemsCenter" itemsHorizontalAlign="itemsCenter">
                    <j:Label html="NAME" >
                        <j:beads>
                            <j:SizeControl size="large"/>
                            <j:TextAlign align="left"/>
                        </j:beads>
                    </j:Label>
                </j:VGroup>
            </j:GridCell>
            <j:GridCell desktopNumerator="1" desktopDenominator="6" tabletNumerator="1" tabletDenominator="6" phoneNumerator="1" phoneDenominator="6" itemsVerticalAlign="itemsCenter">
                <j:VGroup height="100%" itemsVerticalAlign="itemsCenter" itemsHorizontalAlign="itemsCenter">
                    <j:Label html="ACTIVE" >
                        <j:beads>
                            <j:SizeControl size="large"/>
                            <j:TextAlign align="left"/>
                        </j:beads>
                    </j:Label>
                </j:VGroup>
            </j:GridCell>
            <j:GridCell desktopNumerator="1" desktopDenominator="3" tabletNumerator="1" tabletDenominator="3" phoneNumerator="1" phoneDenominator="3" itemsVerticalAlign="itemsCenter">
                <j:VGroup height="100%" itemsVerticalAlign="itemsCenter" itemsHorizontalAlign="itemsCenter">
                    <j:Label html="TYPE" >
                        <j:beads>
                            <j:SizeControl size="large"/>
                            <j:TextAlign align="left"/>
                        </j:beads>
                    </j:Label>
                </j:VGroup>
            </j:GridCell>

        </j:Grid>
        <j:List localId="lData" width="100%" height="100%"
            itemRenderer="ListDataItemRenderer"
            dataProvider="{appModel.dtCurrentData}" labelField="codigo">
            <j:beads>
                <j:ListPresentationModel rowHeight="70"/>
            </j:beads>
        </j:List>
        </j:CardPrimaryContent>
        <j:CardActions>
                <j:Button text="Add" emphasis="primary" outlined="true" click="clickHandler(event)"/>
                <j:Button text="Edit" emphasis="primary" outlined="true" click="clickHandler2(event)" visible="{lData.selectedItem}"/>
                <j:Button text="Remove" emphasis="primary" outlined="true" click="clickHandler3(event)" visible="{lData.selectedItem}"/>
                <j:Label text="{appModel.dataState}" style="align-self: center;"/>
        </j:CardActions>
    </j:Card>

</j:SectionContent>
